Concards output:
```
Usage:
  conc [OPTION]... [FILE|FOLDER]...

Options:
  -r  --review    Show cards available to be reviewed.
  -m  --memorize  Show cards available to be memorized.
  -d  --done      Show cards not available to be reviewed or memorized.
  -n  --number #  Limit the number of cards in the program to "#".
  -e  --edit      Edit the cards, updating used references.
  -p  --print     Prints all cards, slightly formatted.
  -h  --help      If you need assistance.
  -v  --version   Which version are you on again?
      --editor e  Defaults to $EDITOR

For more details, read the fine man page.
```


I'm positive now. I don't want to be able to edit a card. For "editing", I will just open the file instead.



New idea.

Get rid of groups. Metadata is *usually* stored in a separate file.

The syntax is much more simple.

Only 4 delimiters. !> #> @> <@

@#0 the question is...
 @ the answer
 @ is @ this! 

Some ideas for files.
Be able to save cards and metadata in only one file? No.
Be able to write cards to separate file?
Review cards from piping/streaming.

_3dda75cb@> the question is...

@> @# 1525b45f883c05eec46b4f7a88e7f7ef Just a question?
 @ answer
<@

@> Just a question? @ answer
@> Just a question? @ answer
@> Just a question? @ answer
@> Just a question? @ answer
@> Just a question? @ answer
--------------------------------------------------------------- <!@

@> cnc
 @ A console flashcard program
 @ Or is it?
<@

cnc-config
   Is it saved in git?
   Don't need that! I can just check if it is in a git repo.

.concards/.cnc-config
.concards/.cnc-meta
.concards/.git
.concards/.gitignore
.concards/folders
.concards/files

Yes. I think I have figured everything out!

!> @> #> <@

!> ----------------- <@

I don't care about editing cards to keep old checksum!
Now I can think more about version control!

If your user data file is stored under version control and certain conditions
It's just good practice to version control your note files, though not necessary.

Notes are sought for in the $CONCARDS_HOME folder. Your user data file is
stored there too.

Take my user cart.


----------------------------------------------------------------------------------------------
The order of the batches is what determines what you've edited.
This is for file: dude.txt

New cards have some options:
- It is brand new.
- They look familiar.
- You know it already.
On new cards, they either look familiar, 

Here is where we do important stuff.

Edit could just take you to the file. Then the flashcards are reloaded from the
file. You just have to lose your progress. I'm fine with losing my progress.

Be able to toggle file context.

So editing cards...
Umm. Yeah... Cool?

I cannot preserve history. Edited cards are fundamentally different so the
meta-data should not be preserved.

This is geared towards super users.

So how do I deter the frustration of resetting my progress?

Hmm. What if progress is on recorded git history? By default, concards will go
through every git revision and update the metadata to match the current to try and match the history.

Concards will update the meta-data to match current revisions.

Concards will.

git revision.

Hash: 3dda75cb44ed447186834541475f32e2
!> --------------------------------------
@> A question is cool. @ An answer could be cooler.
-------------------------------------- <@

Hash: 3dda75cb44ed447186834541475f32e2
--------------------------------------
@> A question is cool. @ An answer could be cooler. <@

Hash: 3dda75cb44ed447186834541475f32e2
!> -------- @> A question is cool. @ An answer could be cooler.
!> -------- @> A question is cool. @ An answer could be cooler.
!> -------- @> A question is cool. @ An answer could be cooler.
!> -------- @> A question is cool. @ An answer could be cooler.
!> -------- @> A question is cool. @ An answer could be cooler.
!> -------- @> A question is cool. @ An answer could be cooler. <@

----------------------------------------------------------------------------------------------

# this is a comment !>
# @> A question
#  @ An answer
#  @ Another solution <@

<!-- concard @!> --> <!-- <@ exclude -->

<!-- @> A question     -->
<!--  @ an answer      -->
<!--  @ an 1 answer    -->
<!--  @ an 1 answer <@ -->

# !>
# @> Question
#  @ Answer
#  @ Answer #2
#  @ Answer #3

// !> // <!
-- !> -- <!
# !> # <!
<!-- !> --> <!-- <! -->

// @> hello @ hi @ hi <@

jj

// @> Question
//  @ Answer
//  @ Answer #2 <@

!>
@>
#>

Metadata file.
   @> hello @ answer

// !> ----------------------------------------------------------------
// #> 8425b45f883c05eec46b4f7a88e7f7ef 2019-09-09T10:51:12Z 0 sm2 2.5
// #> 8425b45f883c05eec46b4f7a88e7f7ef 2019-09-09T10:51:12Z 0 sm2 2.5
// #> 8425b45f883c05eec46b4f7a88e7f7ef 2019-09-09T10:51:12Z 0 sm2 2.5
// ------------------------------------------------------------------- <@

// #> 8425b45f883c05eec46b4f7a88e7f7ef <#

!> ---------------------------------------------------------------
@> 3dda75cb44ed447186834541475f32e2 2019-09-09T10:51:12Z 0 sm2 2.5
@> 3dda75cb44ed447186834541475f32e2 2019-09-09T10:51:12Z 0 sm2 2.5
@> 8525b45f883c05eec46b4f7a88e7f7ef 2019-09-09T10:51:12Z 0 sm2 2.5
@> 8325b45f883c05eec46b4f7a88e7f7ef 2019-09-09T10:51:12Z 0 sm2 2.5
@> 8425b45f883c05eec46b4f7a88e7f7ef 2019-09-09T10:51:12Z 0 sm2 2.5
@> 8925b45f883c05eec46b4f7a88e7f7ef 2019-09-09T10:51:12Z 0 sm2 2.5
--------------------------------------------------------------- <@

@> 3dda75cb44ed447186834541475f32e2 hello world I am cool @ answer 1 @ answer 2
@> 3dda75cb44ed447186834541475f32e2 hello world I am cool @ answer 1 @ answer 2


@> What is the answer?   @@ hello @2 no
@> What is the question? @@ umm   @2 hi <@

@> Concards
= A cool flashcard program.

@.> What? . Cool . Cooly . Coolie . Coolios <.@

@>! Exclude <@
@>~ Title <@
@># Hash <@

@testing@
@> Question = Answer = Answer <@

@>> Stuff

@> Question
@= Answer #1.
@= Answer #2.
@~ Note 1.

@> Next Question
@= An answer.
@~ A note.

<<@

Yeah. Maybe no groups. You are shown cards that are located in close proximity
to each other. We assume that you are grouping related cards in the same file.
Well, maybe no. Cards within the same block should be related to each other.


What is the answer?   @answer hello @2 no

@~ Title @! Ignore @# Hash @@

@> Who said "To be or not to be"? @= William Shakespeare
@> Who said "To be or not to be"?
   @= William Shakespeare
   @= Allen Moan
   @= Shoe Yang You
   @= 
@> Who said "To be or not to be"?
@- William Shakespeare
<@

@~ The Story of Zeldo
@! -------------------------------------------------------------------
@> What is the question? @1 umm @2 hi <@

aoeu89aoheu89ahoe89uahoe9u83uhau 2019-09-09T10:51:12Z 0 sm2 2.5

@q What is Alan's fav color?
@a Red
@a And Orange
@n Note, these aren't actually his fav colors.
@n These colors represent fire. Yellow does too.
@n https://www.supermemo.com/en/archives1990-2015/articles/20rules
<@

What flashcards look like when you write it:
\@> alan colors @!
-----------------------------------------------------
@q When in doubt, follow your heart.
-----------------------------------------------------
@q What is Alan's fav color? @a Red @a And Orange
@n Note, these aren't actually his fav colors.
@n These colors represent fire. Yellow does too.
@n https://www.supermemo.com/en/archives1990-2015/articles/20rules
----------------------------------------------------- \<@





@q Question
@a Answer
@n Note
@t Timestamp
@s Streak
@m Method
@d Data
@> Group
@g Group

\@> group @s 12 @t 2018-10-10 @m sm2

@n @a... Do those make sense for a group?

@t, @s, and @m only take in a single value. All values after the first word are
ignored. If there is an error parsing one of them, the default value is instead
used. Or an error is returned.

If an alg doesn't exist

Hash is:
   @> group1 group2 @q What is the question?
- @a, @n, @q all have a max character size of 2048.
- groups, alg names, and alg parameters all have a max character size of 64
- TH15154CH3CKSUM is a checksum of the question.
   - Whitespace is Whitespace is changed to a single space for the hash. But the whitespace is preserved for actually storing the card.
   - Actually, whitespace isn't preserved...

How should the time work?
   Time is always in the Greenwich timezone, RFC-3339, or it can be part of it.
   The reasoning to this is that people will rarely look at that. If they want
   control over it, then they need to understand it.

# File format:
All possible meta data things for 1.0:
```
   @> @! @q @a @n @m @t <@
```

## "@>"
Used to start the concards section. You MUST specify the group afterwards.

## "<@"
Ends the concards section. Concards will not interpret anything after this
until it encounters another section "@>".

## "@!"
Pass it a list of space separated strings, and those strings will be ignored
for the remainder of the concards section.

## "@q"
The question for a card. It uses the groups specified from "@>".

## "@a"
An answer for a card. It uses the groups specified from "@a". Multiple per
question.

## "@t"
The timestamp for a card. Only one per question.

## "@m"
One meta data per question.

## "@n"
Multiple notes per question.

@m, and @t on @>?
   They will give defaults to everything.

@a, and @n on @>?
   These give a default list of answers and notes to the next cards. If the
   card has any notes or answers, then these will be overridden.

Example with only one card:
```
@> group1 group2 @!
   @q Who was the first man to walk on the moon?
   @a Neil Armstrong
   @n Also, that was in the year 1969
   @m sm2 2019-09-09T10:00:01Z 3 2.70
@<
```

Options for duplicates:
- Ignore the duplicate. (Default)
- Overwrite your memory.
- Merge notes.

## File format verbose.
# Concard Files
## ~/.config/concards/db.bolt
This is the default filepath for your flashcard database.

## ~/.config/concards/config.yaml
This is the configuration file location. Use this to override defaults.

## ~/.config/concards/algs/
This is where new algorithms will be placed. Concards looks for any "*.lua"
file, compiles them, and adds appropriate new algorithms to concards.


# scratch
Originally, a deck is just a list of cards. Every card has an id. And a deck
control is a deck, file contents, file name, and groups.

Now, I think the database will manage the group problem. And also the id
problem. So I don't think I need cards to have an id. Well maybe the
checksum... And I don't need a deck control anymore. Let's remove the deck
control now and make it compile.

Do I need 

What packages do I need?
- file
- termgui
- deck
- main
- 

# lua example
```
   algs = {sm2}
   function sm2(time, param1, param2,...)
      return time, param1, param2...
   end
```

3 strategies for conflicting names:
- Ignore
- Merge
- Replace

Program lifecycle:
- Read CLI arguments.
- If there are no files, read all from the database.
- If there are files, read files, ignore ones that are already in the database (or use different merge strategy)
- Filter the cards based on CLI arguments.

Ways to manage cards.
- You can read in from a bolt database, or from a text file. Or both.
- You can merge bolt databases intto
